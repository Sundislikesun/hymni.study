#include <stdio.h>
#include <algorithm>
using namespace std;

// 완전탐색  


// 완전탐색 예시 문제 이항계수(조합) nCr
// n개 중에 r개를 순서없이 고른다  

// 1. 중첩 반복문  (골라야 하는 개수 만큼 중첩) 
for(int i = 0; i<n; i++){
	for(int j = i+1; j<n; j++){
		for(int k = j+1; k<n; k++){

		}
	}
}

// 2. 재귀  
int bino_recursive(int n, int r){
	//기저사례 (base case) 
	if(r==0 || n == r) return 1;  // 2C2 == 2C0 == 1 
	
	return bino_recursive(n-1, r-1) + bino_recursive(n-1, r);	 
} 
 
/* 재귀 함수 

기저사례 : 더 이상 쪼개지지 않는 최소한의 작업 
기저사례에 도달하면 답을 곧장 반환하는 조건문을 포함해야 한다. 
존재하는 모든 입력이 기저사례의 답을 이용하도록 신경쓰기.  

*/ 

// 3. 동적 계획법의 메모이제이션으로 개선 

/*

				bino(4, 2)

			bino(3,1) 		bino(3,2)

bino(2,0) 	bino(2,1) 		bino(2,1) 	bino(2,0)

		bino(1,0) bino(1,1)  bino(1,0) bino(1,1)
		
		
bino(2,1) 이 두번 호출된다. bino(1, 0)도 두번 호출된다. 		
*/ 


int cache[30][30] = { -1, } // 메모이제이션 배열 

int bino_memoization(int n, int r){

	//기저사례 (base case) 
	if(r==0 || n == r) return 1;	
	
	if(cache[n][r]  != -1) return cache[n][r]; // 계산했던 값이면 반환
	
	// 계산해서 cache에 저장 후 반환  
	return cache[n][r] = bino_memoization(n-1, r-1) + bino_memoization(n-1, r);	
} 
 

